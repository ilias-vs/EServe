package com.eservice;

import com.eservice.model.service.OrderService;
import com.google.cloud.firestore.*;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseAuthException;
import com.google.firebase.cloud.FirestoreClient;
import com.google.api.core.ApiFuture;
import com.google.firebase.auth.UserRecord;
import com.google.cloud.firestore.DocumentReference;
import com.google.auth.oauth2.GoogleCredentials;
import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;
import com.google.cloud.firestore.Firestore;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.*;
import java.util.concurrent.ExecutionException;


public class TestFirebase {

    public static void main(String[] args) {
        try {
            FileInputStream serviceAccount = new FileInputStream("eserve-hmu-firebase-adminsdk-3gup6-5cb7912973.json");
            FirebaseOptions options = new FirebaseOptions.Builder()
                    .setCredentials(GoogleCredentials.fromStream(serviceAccount))
                    .build();
            FirebaseApp.initializeApp(options);
            System.out.println("Success");
            Firestore db = FirestoreClient.getFirestore();
            createStore(db);
            //System.out.println(OrderService.getClientName("UXq8xNRjnoseN9uaahQn",db));
            //getSample(db);
            //createNewItem(db);
            //removeCategory(db);
            //updateItem(1, db);
            //updateCategoryName(2,db);
            //createCategory(db);
            //String userID=loginClient("tei@test.com","123456");
            //System.out.println(userID);
            //removeMenuItem(db);
            //registerClient("tei@test.com","123456","ilias","Teijis","iEf4tTkEFAhNBDYogN3j",db);
            /*StoreService service=new StoreService();
            service.getStoresByOwner(db,userID);*/
            //getStoresByOwner(db,userID);
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }

    public static String createStore(Firestore db) throws ExecutionException, InterruptedException {

        // Define the collection where store documents are stored
        String collectionName = "stores"; // Change to your collection name

        // Create a map representing the new store's data (without specifying the 'id' field)
        Map<String, Object> newStoreData = new HashMap<>();
        newStoreData.put("id",generateUniqueStoreId(db,collectionName) );
        newStoreData.put("name", "New Store Name"); // Change to the desired store name
        newStoreData.put("online", false);
        newStoreData.put("owner", ""); // Owner field initially empty
        newStoreData.put("imageData", "Image URL"); // Change to the image data URL
        newStoreData.put("address", "Store Address"); // Change to the store address
        newStoreData.put("menu", new ArrayList<>()); // Initialize empty menu list
        newStoreData.put("tables", new ArrayList<>()); // Initialize empty tables list

        // Define the collection reference for the stores
        CollectionReference storesCollectionRef = db.collection(collectionName);

        // Add the new store document to Firestore (Firestore will generate a unique document ID)
        ApiFuture<DocumentReference> future = storesCollectionRef.add(newStoreData);

        // Retrieve the document ID generated by Firestore
        DocumentReference newStoreDocRef = future.get();
        String newStoreDocumentId = newStoreDocRef.getId();

        // Print the document ID generated by Firestore
        System.out.println("New store document created with ID: " + newStoreDocumentId);
        return newStoreDocumentId;
    }

    private static String generateUniqueStoreId(Firestore db, String collectionName) {
        // Query Firestore to find the maximum store ID in the collection
        CollectionReference storesRef = db.collection(collectionName);
        Query query = storesRef.orderBy("id", Query.Direction.DESCENDING).limit(1);
        try {
            QuerySnapshot querySnapshot = query.get().get();
            if (!querySnapshot.isEmpty()) {
                DocumentSnapshot lastDocument = querySnapshot.getDocuments().get(0);
                String lastStoreId = (String) lastDocument.get("id");
                // Increment the last ID as a string (e.g., convert to integer, increment, and convert back to string)
                int incrementedId = Integer.parseInt(lastStoreId) + 1;
                return String.valueOf(incrementedId);
            }
        } catch (InterruptedException | ExecutionException e) {
            e.printStackTrace();
        }
        return "1"; // Return "1" if no documents are found (first store)
    }

    public static void getSample(Firestore db) throws ExecutionException, InterruptedException {
        // Query for documents in the "stores" collection
        ApiFuture<QuerySnapshot> query = db.collection("stores").get();
        QuerySnapshot querySnapshot = query.get();

        for (QueryDocumentSnapshot document : querySnapshot.getDocuments()) {
            // Get the document ID
            String documentId = document.getId();

            // Access the document data
            System.out.println("Document ID: " + documentId);
            System.out.println("Store Name: " + document.getString("name"));
        }
    }

    public static void updateCategoryName(int position ,Firestore db) throws ExecutionException, InterruptedException {
        // Define the document path you want to update
        String documentPath = "stores/Deo3y9LVG6jEaIUraC4p"; // Change to your document path

        // Define the category position you want to update (0-based)
        int categoryPosition = position; // Change to the position of the category you want to update

        // Define the updated category name
        String updatedCategoryName = "Pancakes";

        // Retrieve the existing data from Firestore
        DocumentReference docRef = db.document(documentPath);
        DocumentSnapshot document = docRef.get().get();

        // Check if the document exists
        if (document.exists()) {
            // Extract the existing data as a map
            Map<String, Object> existingData = document.getData();

            // Find the "menu" array
            List<Map<String, Object>> menu = (List<Map<String, Object>>) existingData.get("menu");
            if (menu != null && categoryPosition >= 0 && categoryPosition < menu.size()) {
                // Update the category name
                menu.get(categoryPosition).put("categoryName", updatedCategoryName);

                // Update the Firestore document with the modified "menu" array
                ApiFuture<WriteResult> future = docRef.set(existingData, SetOptions.merge());
                WriteResult writeResult = future.get();
                System.out.println("Document updated at: " + writeResult.getUpdateTime());
            } else {
                System.out.println("Invalid category position or menu array is empty.");
            }
        } else {
            System.out.println("Document does not exist: " + documentPath);
        }
    }
    public static void getStoresByOwner(Firestore db,String ownerID) throws ExecutionException, InterruptedException {
        String ownerValue = ownerID;

        // Create a query that filters documents based on the "owner" field
        Query query = db.collection("stores")
                .whereEqualTo("owner", ownerValue);

        // Execute the query
        ApiFuture<QuerySnapshot> querySnapshot = query.get();

        // Retrieve documents that match the query
        for (QueryDocumentSnapshot document : querySnapshot.get().getDocuments()) {
            String id = document.getId();
            String name = document.getString("name");
            Boolean online=document.getBoolean("online");
            String address= document.getString("address");
            String owner= document.getString("owner");
            System.out.println("Store Data ......");
            System.out.println("Store ID: " + id);
            System.out.println("Store Name: " + name);
            System.out.println("Store online: " + online);
            System.out.println("Store address: " + address);
            System.out.println("Store owner: " + owner);
            System.out.println();


            // Access the "tables" field
            List<Map<String, Object>> tables = (List<Map<String, Object>>) document.get("tables");
            if (tables != null) {
                for (Map<String, Object> table : tables) {

                    Number tableId = (Number) table.get("table_id");
                    String tableName = (String) table.get("name");
                    boolean isReserved = (boolean) table.get("is_reserved");

                    System.out.println("Table ID: " + tableId);
                    System.out.println("Table Name: " + tableName);
                    System.out.println("Is Reserved: " + isReserved);
                    System.out.println();
                }
            }
            // Access the "menu" field
            List<Map<String, Object>> menu = (List<Map<String, Object>>) document.get("menu");
            if (menu != null) {
                for (Map<String, Object> menuCategory : menu) {
                    String categoryName = (String) menuCategory.get("categoryName");
                    System.out.println("Category Name: " + categoryName);
                    List<Map<String, Object>> menuItems = (List<Map<String, Object>>) menuCategory.get("menuItems");
                    if (menuItems != null) {
                        for (Map<String, Object> item : menuItems) {
                            String itemName = (String) item.get("name");
                            String cost= (String) item.get("cost");
                            System.out.println("Item Name: " + itemName + " " + cost + " $");
                        }
                    }
                }
            }
        }
    }

    public static void registerClient(String email, String password, String firstName, String lastName, String storeId, Firestore db) {
        try {

            FirebaseAuth auth = FirebaseAuth.getInstance();

            // Create a new client user
            UserRecord.CreateRequest request = new UserRecord.CreateRequest()
                    .setEmail(email)
                    .setPassword(password);

            UserRecord userRecord = auth.createUser(request);

            // Add user data to Firestore
            DocumentReference clientRef = db.collection("clients").document(userRecord.getUid());

            Map<String, Object> clientData = new HashMap<>();
            clientData.put("username", email);
            clientData.put("name", firstName);
            clientData.put("last_name", lastName);
            clientData.put("store_id", storeId);

            clientRef.set(clientData).get();
            System.out.println("Successfully registered client: " + userRecord.getUid());

        } catch (ExecutionException | FirebaseAuthException | InterruptedException e) {
            throw new RuntimeException(e);
        }

    }

    public static void createNewItem(Firestore db ) throws ExecutionException, InterruptedException {
        // Define the document path you want to update
        String documentPath = "stores/Deo3y9LVG6jEaIUraC4p"; // Change to your document path

        // Retrieve the existing data from Firestore
        DocumentReference docRef = db.document(documentPath);
        DocumentSnapshot document = docRef.get().get();

        // Check if the document exists
        if (document.exists()) {
            // Extract the existing data as a map
            Map<String, Object> existingData = document.getData();

            // Modify the menu category (e.g., "Cofee") to add a new item
            String categoryName = "Pancakes"; // Change to your category name
            Map<String, Object> newMenuItem = new HashMap<>();
            newMenuItem.put("name", "Pancakes με Πραλίνα");
            newMenuItem.put("cost", "4.8");
            newMenuItem.put("id", 0); // You can set the ID as needed

            // Update the menu category
            List<Map<String, Object>> menu = (List<Map<String, Object>>) existingData.get("menu");
            if (menu != null) {
                for (Map<String, Object> category : menu) {
                    if (category.get("categoryName").equals(categoryName)) {
                        List<Map<String, Object>> menuItems = (List<Map<String, Object>>) category.get("menuItems");
                        if (menuItems != null) {
                            menuItems.add(newMenuItem);
                        }
                        break;
                    }
                }
            }

            // Update the Firestore document with the modified data
            ApiFuture<WriteResult> future = docRef.set(existingData, SetOptions.merge());
            WriteResult writeResult = future.get();
            System.out.println("Document updated at: " + writeResult.getUpdateTime());
        } else {
            System.out.println("Document does not exist: " + documentPath);
        }
    }
    public static void updateItem(int position ,Firestore db) throws ExecutionException, InterruptedException {
        // Define the document path you want to update
        String documentPath = "stores/Deo3y9LVG6jEaIUraC4p"; // Change to your document path

        // Define the category and item position you want to update
        String categoryName = "Cofee"; // Change to your category name
        int itemPosition =position; // Change to the position of the item you want to update (0-based)

        // Define the updated name and cost
        String updatedName = "Freddo Espresso";
        String updatedCost = "2.40";

        // Retrieve the existing data from Firestore
        DocumentReference docRef = db.document(documentPath);
        DocumentSnapshot document = docRef.get().get();

        // Check if the document exists
        if (document.exists()) {
            // Extract the existing data as a map
            Map<String, Object> existingData = document.getData();

            // Find the category in the menu
            List<Map<String, Object>> menu = (List<Map<String, Object>>) existingData.get("menu");
            if (menu != null) {
                for (Map<String, Object> category : menu) {
                    if (category.get("categoryName").equals(categoryName)) {
                        List<Map<String, Object>> menuItems = (List<Map<String, Object>>) category.get("menuItems");
                        if (menuItems != null && itemPosition >= 0 && itemPosition < menuItems.size()) {
                            Map<String, Object> itemToUpdate = menuItems.get(itemPosition);

                            // Update the name and cost fields
                            itemToUpdate.put("name", updatedName);
                            itemToUpdate.put("cost", updatedCost);

                            // Update the Firestore document with the modified data
                            ApiFuture<WriteResult> future = docRef.set(existingData, SetOptions.merge());
                            WriteResult writeResult = future.get();
                            System.out.println("Document updated at: " + writeResult.getUpdateTime());
                            break; // Exit the loop once the item is found and updated
                        }
                    }
                }
            }
        } else {
            System.out.println("Document does not exist: " + documentPath);
        }
    }

    public static void removeMenuItem(Firestore db, int categoryPosition, int itemPosition) throws ExecutionException, InterruptedException {
        // Define the document path you want to update
        String documentPath = "stores/Deo3y9LVG6jEaIUraC4p"; // Change to your document path

        // Retrieve the existing data from Firestore
        DocumentReference docRef = db.document(documentPath);
        DocumentSnapshot document = docRef.get().get();

        // Check if the document exists
        if (document.exists()) {
            // Extract the existing data as a map
            Map<String, Object> existingData = document.getData();

            // Find the category in the menu
            List<Map<String, Object>> menu = (List<Map<String, Object>>) existingData.get("menu");
            if (menu != null && categoryPosition >= 0 && categoryPosition < menu.size()) {
                Map<String, Object> category = menu.get(categoryPosition);

                // Find the "menuItems" array in the category
                List<Map<String, Object>> menuItems = (List<Map<String, Object>>) category.get("menuItems");
                if (menuItems != null && itemPosition >= 0 && itemPosition < menuItems.size()) {
                    // Remove the item at the specified position
                    menuItems.remove(itemPosition);

                    // Update the Firestore document with the modified data
                    ApiFuture<WriteResult> future = docRef.set(existingData, SetOptions.merge());
                    WriteResult writeResult = future.get();
                    System.out.println("Document updated at: " + writeResult.getUpdateTime());
                } else {
                    System.out.println("Invalid item position or 'menuItems' array is empty.");
                }
            } else {
                System.out.println("Invalid category position or 'menu' array is empty.");
            }
        } else {
            System.out.println("Document does not exist: " + documentPath);
        }
    }
    public static String loginClient(String email, String password) {
        try {
            // URL for the POST request
            URL url = new URL("https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBFqDfbD1-XMV_RzS-mlAS6o1BoLWL510s");

            // Create a HttpURLConnection
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();

            // Set up the request
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setRequestProperty("Accept", "application/json");
            connection.setDoOutput(true);

            // Create the JSON payload using Gson
            JsonObject payload = new JsonObject();
            payload.addProperty("email", email);
            payload.addProperty("password", password);
            payload.addProperty("returnSecureToken", true);

            // Write the payload to the request
            try (DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream())) {
                outputStream.writeBytes(payload.toString());
                outputStream.flush();
            }

            // Get the response code
            int responseCode = connection.getResponseCode();
            System.out.println("Response Code: " + responseCode);
            JsonObject jsonResponse = null;
            if (responseCode == 200) {
                // Read the response
                StringBuilder response = new StringBuilder();
                try (BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
                    String line;
                    while ((line = in.readLine()) != null) {
                        response.append(line);
                    }
                }

                // Parse the JSON response using Gson's JsonParser
                JsonParser jsonParser = new JsonParser();
                jsonResponse = jsonParser.parse(response.toString()).getAsJsonObject();

                // Handle the JSON response as needed
                System.out.println("Response JSON: " + jsonResponse.toString());

            }
            // Close the connection
            connection.disconnect();
            return jsonResponse.get("localId").getAsString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    public static void createCategory(Firestore db) throws ExecutionException, InterruptedException {
        // Define the document path you want to update
        String documentPath = "stores/Deo3y9LVG6jEaIUraC4p"; // Change to your document path

        // Define the new category name
        String newCategoryName = "New Category"; // Change to the desired category name

        // Retrieve the existing data from Firestore
        DocumentReference docRef = db.document(documentPath);
        DocumentSnapshot document = docRef.get().get();

        // Check if the document exists
        if (document.exists()) {
            // Extract the existing data as a map
            Map<String, Object> existingData = document.getData();

            // Find the "menu" array
            List<Map<String, Object>> menu = (List<Map<String, Object>>) existingData.get("menu");
            if (menu != null) {
                // Create a new category object with the specified name and an empty menuItems array
                Map<String, Object> newCategory = new HashMap<>();
                newCategory.put("categoryName", newCategoryName);
                newCategory.put("menuItems", new ArrayList<>()); // Create an empty menuItems array

                // Add the new category to the end of the "menu" array
                menu.add(newCategory);

                // Update the Firestore document with the modified "menu" array
                ApiFuture<WriteResult> future = docRef.set(existingData, SetOptions.merge());
                WriteResult writeResult = future.get();
                System.out.println("Document updated at: " + writeResult.getUpdateTime());
            } else {
                System.out.println("The 'menu' array does not exist in the document.");
            }
        } else {
            System.out.println("Document does not exist: " + documentPath);
        }
    }
    public static void removeCategory(Firestore db) throws ExecutionException, InterruptedException {
        // Define the document path you want to update
        String documentPath = "stores/Deo3y9LVG6jEaIUraC4p"; // Change to your document path

        // Define the position of the category you want to remove (0-based)
        int categoryPositionToRemove = 2; // Change to the position of the category you want to remove

        // Retrieve the existing data from Firestore
        DocumentReference docRef = db.document(documentPath);
        DocumentSnapshot document = docRef.get().get();

        // Check if the document exists
        if (document.exists()) {
            // Extract the existing data as a map
            Map<String, Object> existingData = document.getData();

            // Find the "menu" array
            List<Map<String, Object>> menu = (List<Map<String, Object>>) existingData.get("menu");
            if (menu != null && categoryPositionToRemove >= 0 && categoryPositionToRemove < menu.size()) {
                // Remove the category at the specified position
                menu.remove(categoryPositionToRemove);

                // Update the Firestore document with the modified "menu" array
                ApiFuture<WriteResult> future = docRef.set(existingData, SetOptions.merge());
                WriteResult writeResult = future.get();
                System.out.println("Document updated at: " + writeResult.getUpdateTime());
            } else {
                System.out.println("Invalid category position or menu array is empty.");
            }
        } else {
            System.out.println("Document does not exist: " + documentPath);
        }
    }

}

